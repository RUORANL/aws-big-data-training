AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KinesisFirehoseDeliveryStream:
    Description: The Name for KinesisFirehose DeliveryStream
    Type: String  
    Default: 'access-logs-kdf-deliverstream'
    
  KinesisDataStream: 
    Description: The Name for KinesisDataStream
    Type: String
    Default: 'access-logs-kds-stream'

  Department:
    Description: The department for this resource
    Type: String
    Default: 'AWSBigData'
  Team:
    Description: The team for this resource
    Type: String
    Default: 'Kinesis'
  Owner:
    Description: The owner of this resource
    Type: String

Resources:
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'access-logs-${AWS::AccountId}'
      AccessControl: Private
  MyAthenaResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'athena-result-${AWS::AccountId}'
      AccessControl: Private
  MyBillingReportBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'billing-data-${AWS::AccountId}'
      AccessControl: Private
  KinesisDataFirehoseLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: KinesisDataFirehoseTransformationLambda
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'big-data-training-cfn-templates'
        S3Key: 'DataTransformLambda.zip'
      Runtime: python3.8
      Timeout: 300
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: AdminPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - '*'
            Resource: '*'

  KinesisDataStreamRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "kinesis.amazonaws.com"
                - "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                "sts:ExternalId": !Ref "AWS::AccountId"

  KinesisDataStreamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: kinesis_data_stream_policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "firehose:PutRecord"
              - "firehose:PutRecordBatch"
              - "kinesis:DescribeStream"
              - "kinesis:GetShardIterator"
              - "kinesis:GetRecords"
              - "kinesis:ListShards"
            Resource: "*"
          -
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
            Resource: "*"
      Roles:
        - !Ref KinesisDataStreamRole

  FirehoseDeliveryRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
       Version: "2012-10-17"
       Statement:
         -
          Effect: "Allow"
          Principal:
            Service:
             - "firehose.amazonaws.com"
          Action:
             - "sts:AssumeRole"
          Condition:
             StringEquals:
               "sts:ExternalId": !Ref "AWS::AccountId"
        

  FirehoseDeliveryPolicy:
   Type: AWS::IAM::Policy
   Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${MyS3Bucket}'
              - !Sub 'arn:aws:s3:::${MyS3Bucket}*'
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
              - 'lambda:GetFunctionConfiguration' 
            Resource: '*'
      Roles:
        - !Ref FirehoseDeliveryRole
  MyKDS:
    Type: "AWS::Kinesis::Stream"
    Properties:
      Name: !Ref KinesisDataStream
      ShardCount: 1
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: "KMS"
        KeyId: "alias/aws/kinesis"
      Tags:
        - Key: Name
          Value: !Ref KinesisDataStream
        - Key: Department
          Value: !Ref Department
        - Key: Team
          Value: !Ref Team
        - Key: Owner
          Value: !Ref Owner
        
  MyKDFfromDirectPut:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: MyS3Bucket 
    Properties:
     ExtendedS3DestinationConfiguration:
       BucketARN: !Sub 'arn:aws:s3:::${MyS3Bucket}'
       BufferingHints:
         IntervalInSeconds: 60
         SizeInMBs: 1
       CompressionFormat: UNCOMPRESSED
       Prefix: access-logs-direct-put-tsv/
       RoleARN: !GetAtt FirehoseDeliveryRole.Arn
       ProcessingConfiguration:
         Enabled: true
         Processors:
           - Type: Lambda
             Parameters:
               - ParameterName: LambdaArn
                 ParameterValue: !GetAtt KinesisDataFirehoseLambda.Arn
     DeliveryStreamName: !Sub '${KinesisFirehoseDeliveryStream}-direct-put'
     DeliveryStreamType: 'DirectPut'

  MyKDFfromKDS:
    Type: AWS::KinesisFirehose::DeliveryStream
    DependsOn: MyS3Bucket 
    Properties:
     KinesisStreamSourceConfiguration: 
      KinesisStreamARN: !GetAtt MyKDS.Arn
      RoleARN: !GetAtt KinesisDataStreamRole.Arn
     ExtendedS3DestinationConfiguration:
       BucketARN: !Sub 'arn:aws:s3:::${MyS3Bucket}'
       BufferingHints:
         IntervalInSeconds: 60
         SizeInMBs: 1
       CompressionFormat: UNCOMPRESSED
       Prefix: access-logs-data-stream-tsv/
       RoleARN: !GetAtt FirehoseDeliveryRole.Arn
     DeliveryStreamName: !Sub '${KinesisFirehoseDeliveryStream}-data-stream'
     DeliveryStreamType: 'KinesisStreamAsSource'

Outputs:
   KinesisFirehoseDeliveryStreamDirectPut:
     Description: Kinesis Firehose DeliveryStream Name for Direct Put
     Value: !Sub '${KinesisFirehoseDeliveryStream}-direct-put'
   KinesisFirehoseDeliveryStreamDataStream:
     Description: Kinesis Firehose DeliveryStream Name for DataStream
     Value: !Sub '${KinesisFirehoseDeliveryStream}-data-stream'
   KinesisDataStream:
     Description: Kinesis Data Stream Name
     Value: !Ref KinesisDataStream
   S3StreamDataBucket: 
     Value: !Ref MyS3Bucket
     Description: Name of the data bucket created
   S3AthenaQueryResultBucket: 
     Value: !Ref MyAthenaResultBucket
     Description: Name of the athena bucket created
   S3BillingDataBucket: 
     Value: !Ref MyBillingReportBucket
     Description: Name of the billing bucket created